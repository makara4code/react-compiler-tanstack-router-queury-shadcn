/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutUserManagementUsersImport } from './routes/_layout/user-management/users'
import { Route as LayoutUserManagementRolesImport } from './routes/_layout/user-management/roles'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutUserManagementUsersRoute = LayoutUserManagementUsersImport.update({
  id: '/user-management/users',
  path: '/user-management/users',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutUserManagementRolesRoute = LayoutUserManagementRolesImport.update({
  id: '/user-management/roles',
  path: '/user-management/roles',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/user-management/roles': {
      id: '/_layout/user-management/roles'
      path: '/user-management/roles'
      fullPath: '/user-management/roles'
      preLoaderRoute: typeof LayoutUserManagementRolesImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/user-management/users': {
      id: '/_layout/user-management/users'
      path: '/user-management/users'
      fullPath: '/user-management/users'
      preLoaderRoute: typeof LayoutUserManagementUsersImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutUserManagementRolesRoute: typeof LayoutUserManagementRolesRoute
  LayoutUserManagementUsersRoute: typeof LayoutUserManagementUsersRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutUserManagementRolesRoute: LayoutUserManagementRolesRoute,
  LayoutUserManagementUsersRoute: LayoutUserManagementUsersRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/': typeof LayoutIndexRoute
  '/user-management/roles': typeof LayoutUserManagementRolesRoute
  '/user-management/users': typeof LayoutUserManagementUsersRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/': typeof LayoutIndexRoute
  '/user-management/roles': typeof LayoutUserManagementRolesRoute
  '/user-management/users': typeof LayoutUserManagementUsersRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/user-management/roles': typeof LayoutUserManagementRolesRoute
  '/_layout/user-management/users': typeof LayoutUserManagementUsersRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/'
    | '/user-management/roles'
    | '/user-management/users'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/' | '/user-management/roles' | '/user-management/users'
  id:
    | '__root__'
    | '/_layout'
    | '/login'
    | '/_layout/'
    | '/_layout/user-management/roles'
    | '/_layout/user-management/users'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/login"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/",
        "/_layout/user-management/roles",
        "/_layout/user-management/users"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/user-management/roles": {
      "filePath": "_layout/user-management/roles.tsx",
      "parent": "/_layout"
    },
    "/_layout/user-management/users": {
      "filePath": "_layout/user-management/users.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
